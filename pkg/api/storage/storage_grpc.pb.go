// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: storage/storage.proto

package storage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageClient interface {
	MovieCreate(ctx context.Context, in *StorageMovieCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MovieList(ctx context.Context, in *StorageMovieListRequest, opts ...grpc.CallOption) (Storage_MovieListClient, error)
	MovieUpdate(ctx context.Context, in *StorageMovieUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MovieDelete(ctx context.Context, in *StorageMovieDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MovieGetOne(ctx context.Context, in *StorageMovieGetOneRequest, opts ...grpc.CallOption) (*StorageMovieGetOneResponse, error)
}

type storageClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageClient(cc grpc.ClientConnInterface) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) MovieCreate(ctx context.Context, in *StorageMovieCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ozon.dev.homework.api.storage.Storage/MovieCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) MovieList(ctx context.Context, in *StorageMovieListRequest, opts ...grpc.CallOption) (Storage_MovieListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Storage_ServiceDesc.Streams[0], "/ozon.dev.homework.api.storage.Storage/MovieList", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageMovieListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Storage_MovieListClient interface {
	Recv() (*StorageMovieListResponse, error)
	grpc.ClientStream
}

type storageMovieListClient struct {
	grpc.ClientStream
}

func (x *storageMovieListClient) Recv() (*StorageMovieListResponse, error) {
	m := new(StorageMovieListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageClient) MovieUpdate(ctx context.Context, in *StorageMovieUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ozon.dev.homework.api.storage.Storage/MovieUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) MovieDelete(ctx context.Context, in *StorageMovieDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ozon.dev.homework.api.storage.Storage/MovieDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) MovieGetOne(ctx context.Context, in *StorageMovieGetOneRequest, opts ...grpc.CallOption) (*StorageMovieGetOneResponse, error) {
	out := new(StorageMovieGetOneResponse)
	err := c.cc.Invoke(ctx, "/ozon.dev.homework.api.storage.Storage/MovieGetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServer is the server API for Storage service.
// All implementations must embed UnimplementedStorageServer
// for forward compatibility
type StorageServer interface {
	MovieCreate(context.Context, *StorageMovieCreateRequest) (*emptypb.Empty, error)
	MovieList(*StorageMovieListRequest, Storage_MovieListServer) error
	MovieUpdate(context.Context, *StorageMovieUpdateRequest) (*emptypb.Empty, error)
	MovieDelete(context.Context, *StorageMovieDeleteRequest) (*emptypb.Empty, error)
	MovieGetOne(context.Context, *StorageMovieGetOneRequest) (*StorageMovieGetOneResponse, error)
	mustEmbedUnimplementedStorageServer()
}

// UnimplementedStorageServer must be embedded to have forward compatible implementations.
type UnimplementedStorageServer struct {
}

func (UnimplementedStorageServer) MovieCreate(context.Context, *StorageMovieCreateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovieCreate not implemented")
}
func (UnimplementedStorageServer) MovieList(*StorageMovieListRequest, Storage_MovieListServer) error {
	return status.Errorf(codes.Unimplemented, "method MovieList not implemented")
}
func (UnimplementedStorageServer) MovieUpdate(context.Context, *StorageMovieUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovieUpdate not implemented")
}
func (UnimplementedStorageServer) MovieDelete(context.Context, *StorageMovieDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovieDelete not implemented")
}
func (UnimplementedStorageServer) MovieGetOne(context.Context, *StorageMovieGetOneRequest) (*StorageMovieGetOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovieGetOne not implemented")
}
func (UnimplementedStorageServer) mustEmbedUnimplementedStorageServer() {}

// UnsafeStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServer will
// result in compilation errors.
type UnsafeStorageServer interface {
	mustEmbedUnimplementedStorageServer()
}

func RegisterStorageServer(s grpc.ServiceRegistrar, srv StorageServer) {
	s.RegisterService(&Storage_ServiceDesc, srv)
}

func _Storage_MovieCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageMovieCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).MovieCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozon.dev.homework.api.storage.Storage/MovieCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).MovieCreate(ctx, req.(*StorageMovieCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_MovieList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StorageMovieListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServer).MovieList(m, &storageMovieListServer{stream})
}

type Storage_MovieListServer interface {
	Send(*StorageMovieListResponse) error
	grpc.ServerStream
}

type storageMovieListServer struct {
	grpc.ServerStream
}

func (x *storageMovieListServer) Send(m *StorageMovieListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Storage_MovieUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageMovieUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).MovieUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozon.dev.homework.api.storage.Storage/MovieUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).MovieUpdate(ctx, req.(*StorageMovieUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_MovieDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageMovieDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).MovieDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozon.dev.homework.api.storage.Storage/MovieDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).MovieDelete(ctx, req.(*StorageMovieDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_MovieGetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageMovieGetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).MovieGetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozon.dev.homework.api.storage.Storage/MovieGetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).MovieGetOne(ctx, req.(*StorageMovieGetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Storage_ServiceDesc is the grpc.ServiceDesc for Storage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Storage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ozon.dev.homework.api.storage.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MovieCreate",
			Handler:    _Storage_MovieCreate_Handler,
		},
		{
			MethodName: "MovieUpdate",
			Handler:    _Storage_MovieUpdate_Handler,
		},
		{
			MethodName: "MovieDelete",
			Handler:    _Storage_MovieDelete_Handler,
		},
		{
			MethodName: "MovieGetOne",
			Handler:    _Storage_MovieGetOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MovieList",
			Handler:       _Storage_MovieList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "storage/storage.proto",
}
